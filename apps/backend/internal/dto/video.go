package dto

import (
	"app-backend/internal/types"
	transcriptTypes "app-backend/internal/services/transcript/types"
)

// VideoInfoRequest represents a request to get video information
type VideoInfoRequest struct {
	VideoURL string `uri:"videoUrl" binding:"required"`
}

// VideoInfoResponse represents video information response
type VideoInfoResponse struct {
	ID           string                       `json:"id"`
	Provider     types.VideoProvider          `json:"provider"`
	Title        string                       `json:"title"`
	Description  string                       `json:"description"`
	Duration     types.MillisecondDuration    `json:"duration"`
	ThumbnailURL string                       `json:"thumbnailUrl"`
	URL          string                       `json:"url"`
	Capabilities *VideoCapabilitiesResponse   `json:"capabilities,omitempty"`
}

// GetTranscriptRequest represents a request to get video transcript
type GetTranscriptRequest struct {
	VideoURL string `uri:"videoUrl" binding:"required"`
	Language string `form:"lang"`
}

// GetTranscriptResponse represents transcript response
type GetTranscriptResponse struct {
	VideoID   string                    `json:"videoId"`
	Provider  types.VideoProvider       `json:"provider"`
	Language  string                    `json:"language"`
	Segments  []TranscriptSegmentResponse `json:"segments"`
	Available bool                      `json:"available"`
	Source    string                    `json:"source"`
}

// TranscriptSegmentResponse represents a transcript segment
type TranscriptSegmentResponse struct {
	StartTime types.MillisecondDuration `json:"startTime"`
	EndTime   types.MillisecondDuration `json:"endTime"`
	Text      string                    `json:"text"`
	Index     int                       `json:"index"`
}

// TranslateTranscriptUriRequest represents the URI parameters for translate transcript
type TranslateTranscriptUriRequest struct {
	VideoURL string `uri:"videoUrl" binding:"required"`
}

// TranslateTranscriptBodyRequest represents the JSON body for translate transcript
type TranslateTranscriptBodyRequest struct {
	TargetLang  string `json:"targetLang" binding:"required"`
	SourceLang  string `json:"sourceLang"`
	CacheResult bool   `json:"cacheResult"`
}

// TranslateTranscriptRequest represents a request to translate transcript
type TranslateTranscriptRequest struct {
	VideoURL     string `uri:"videoUrl" binding:"required"`
	TargetLang   string `json:"targetLang" binding:"required"`
	SourceLang   string `json:"sourceLang"`
	CacheResult  bool   `json:"cacheResult"`
}

// TranslateTranscriptResponse represents translated transcript response
type TranslateTranscriptResponse struct {
	VideoID      string                         `json:"videoId"`
	Provider     types.VideoProvider            `json:"provider"`
	SourceLang   string                         `json:"sourceLang"`
	TargetLang   string                         `json:"targetLang"`
	Segments     []TranscriptSegmentResponse    `json:"segments"`
	Translations []TranslatedSegmentResponse    `json:"translations"`
	Cached       bool                          `json:"cached"`
}

// TranslatedSegmentResponse represents a translated segment
type TranslatedSegmentResponse struct {
	Index          int    `json:"index"`
	OriginalText   string `json:"originalText"`
	TranslatedText string `json:"translatedText"`
}

// GetAvailableLanguagesRequest represents a request to get available languages
type GetAvailableLanguagesRequest struct {
	VideoURL string `uri:"videoUrl" binding:"required"`
}

// GetAvailableLanguagesResponse represents available languages response
type GetAvailableLanguagesResponse struct {
	VideoID   string             `json:"videoId"`
	Provider  types.VideoProvider `json:"provider"`
	Languages []LanguageResponse  `json:"languages"`
}

// LanguageResponse represents a language option
type LanguageResponse struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

// VideoCapabilitiesResponse represents video capabilities
type VideoCapabilitiesResponse struct {
	HasTranscript         bool               `json:"hasTranscript"`
	AvailableLanguages    []LanguageResponse `json:"availableLanguages"`
	SupportsAutoGenerated bool               `json:"supportsAutoGenerated"`
}

// GetSupportedProvidersResponse represents supported providers response
type GetSupportedProvidersResponse struct {
	Providers []types.VideoProvider `json:"providers"`
}

// GetSupportedLanguagesResponse represents supported translation languages
type GetSupportedLanguagesResponse struct {
	Languages []LanguageResponse `json:"languages"`
}

// ErrorResponse represents an error response
type ErrorResponse struct {
	Error   string `json:"error"`
	Code    string `json:"code,omitempty"`
	Details string `json:"details,omitempty"`
}

// ConvertToTranscriptSegmentResponse converts internal type to DTO
func ConvertToTranscriptSegmentResponse(segment types.TranscriptSegment) TranscriptSegmentResponse {
	return TranscriptSegmentResponse{
		StartTime: segment.StartTime,
		EndTime:   segment.EndTime,
		Text:      segment.Text,
		Index:     segment.Index,
	}
}

// ConvertToTranslatedSegmentResponse converts internal type to DTO
func ConvertToTranslatedSegmentResponse(segment types.TranslatedSegment) TranslatedSegmentResponse {
	return TranslatedSegmentResponse{
		Index:          segment.Index,
		OriginalText:   segment.OriginalText,
		TranslatedText: segment.TranslatedText,
	}
}

// ConvertToLanguageResponse converts internal type to DTO
func ConvertToLanguageResponse(lang types.Language) LanguageResponse {
	return LanguageResponse{
		Code: lang.Code,
		Name: lang.Name,
	}
}

// ConvertFromTranscriptServiceSegment converts transcript service segment to DTO
func ConvertFromTranscriptServiceSegment(segment transcriptTypes.TranscriptSegment) TranscriptSegmentResponse {
	return TranscriptSegmentResponse{
		StartTime: types.MillisecondDuration(segment.Start.Milliseconds()),
		EndTime:   types.MillisecondDuration((segment.Start + segment.Duration).Milliseconds()),
		Text:      segment.Text,
		Index:     0, // Index not provided by transcript service
	}
}

// ConvertToVideoCapabilitiesResponse converts internal type to DTO
func ConvertToVideoCapabilitiesResponse(caps types.VideoCapabilities) VideoCapabilitiesResponse {
	var languages []LanguageResponse
	for _, lang := range caps.AvailableLanguages {
		languages = append(languages, ConvertToLanguageResponse(lang))
	}

	return VideoCapabilitiesResponse{
		HasTranscript:         caps.HasTranscript,
		AvailableLanguages:    languages,
		SupportsAutoGenerated: caps.SupportsAutoGenerated,
	}
}