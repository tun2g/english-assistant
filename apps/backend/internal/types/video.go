package types

import (
	"encoding/json"
	"time"
)

// VideoProvider represents different video platforms
type VideoProvider string

const (
	ProviderYouTube VideoProvider = "youtube"
	ProviderVimeo   VideoProvider = "vimeo"
	ProviderTwitch  VideoProvider = "twitch"
	// Add more providers as needed
)

// MillisecondDuration wraps time.Duration to marshal as milliseconds for frontend compatibility
type MillisecondDuration time.Duration

// MarshalJSON implements json.Marshaler to serialize as milliseconds
func (d MillisecondDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(int64(time.Duration(d) / time.Millisecond))
}

// UnmarshalJSON implements json.Unmarshaler to deserialize from milliseconds
func (d *MillisecondDuration) UnmarshalJSON(data []byte) error {
	var ms int64
	if err := json.Unmarshal(data, &ms); err != nil {
		return err
	}
	*d = MillisecondDuration(time.Duration(ms) * time.Millisecond)
	return nil
}

// VideoInfo represents basic information about a video
type VideoInfo struct {
	ID          string               `json:"id"`
	Provider    VideoProvider        `json:"provider"`
	Title       string               `json:"title"`
	Description string               `json:"description"`
	Duration    MillisecondDuration  `json:"duration"`
	ThumbnailURL string              `json:"thumbnailUrl"`
	URL         string               `json:"url"`
}

// TranscriptSegment represents a single segment of transcript
type TranscriptSegment struct {
	StartTime MillisecondDuration `json:"startTime"`
	EndTime   MillisecondDuration `json:"endTime"`
	Text      string              `json:"text"`
	Index     int                 `json:"index"`
}

// Transcript represents the complete transcript of a video
type Transcript struct {
	VideoID   string              `json:"videoId"`
	Provider  VideoProvider       `json:"provider"`
	Language  string              `json:"language"`
	Segments  []TranscriptSegment `json:"segments"`
	Available bool                `json:"available"`
	Source    string              `json:"source"` // "manual", "auto-generated"
}

// TranslatedSegment represents a translated transcript segment
type TranslatedSegment struct {
	Index         int    `json:"index"`
	OriginalText  string `json:"originalText"`
	TranslatedText string `json:"translatedText"`
}

// DualLanguageTranscript represents transcript in two languages
type DualLanguageTranscript struct {
	VideoID      string               `json:"videoId"`
	Provider     VideoProvider        `json:"provider"`
	SourceLang   string               `json:"sourceLang"`
	TargetLang   string               `json:"targetLang"`
	Segments     []TranscriptSegment  `json:"segments"`
	Translations []TranslatedSegment  `json:"translations"`
	Cached       bool                 `json:"cached"`
}

// Language represents a supported language
type Language struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

// VideoCapabilities represents what features are available for a video
type VideoCapabilities struct {
	HasTranscript        bool       `json:"hasTranscript"`
	AvailableLanguages   []Language `json:"availableLanguages"`
	SupportsAutoGenerated bool       `json:"supportsAutoGenerated"`
}