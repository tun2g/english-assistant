basePath: /api/v1
definitions:
  app-backend_internal_dto.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/app-backend_internal_dto.UserResponse'
    type: object
  app-backend_internal_dto.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  app-backend_internal_dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  app-backend_internal_dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  app-backend_internal_dto.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 100
        minLength: 2
        type: string
      last_name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  app-backend_internal_dto.SessionResponse:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      ip_address:
        type: string
      is_active:
        type: boolean
      last_used:
        type: string
      user_agent:
        type: string
    type: object
  app-backend_internal_dto.UpdateProfileRequest:
    properties:
      avatar:
        type: string
      first_name:
        maxLength: 100
        minLength: 2
        type: string
      last_name:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - first_name
    - last_name
    type: object
  app-backend_internal_dto.UserListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/app-backend_internal_dto.UserResponse'
        type: array
      pagination:
        $ref: '#/definitions/app-backend_internal_types.PaginationMetadata'
    type: object
  app-backend_internal_dto.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  app-backend_internal_types.PaginationMetadata:
    properties:
      current_page:
        type: integer
      has_next:
        type: boolean
      has_prev:
        type: boolean
      page_size:
        type: integer
      total_pages:
        type: integer
      total_records:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for English learning application with authentication and user management
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: English Learning API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app-backend_internal_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app-backend_internal_dto.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user from current session
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - authentication
  /auth/logout-all:
    post:
      consumes:
      - application/json
      description: Logout user from all active sessions across all devices
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out from all sessions
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Logout user from all sessions
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app-backend_internal_dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app-backend_internal_dto.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app-backend_internal_dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app-backend_internal_dto.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - authentication
  /auth/sessions:
    get:
      consumes:
      - application/json
      description: Get all active sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of active sessions
          schema:
            items:
              $ref: '#/definitions/app-backend_internal_dto.SessionResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user sessions
      tags:
      - authentication
  /auth/sessions/{sessionId}:
    delete:
      consumes:
      - application/json
      description: Revoke a specific session by session ID
      parameters:
      - description: Session ID to revoke
        in: path
        name: sessionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Session revoked successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid session ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Session does not belong to user
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Session not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Revoke a specific session
      tags:
      - authentication
  /user/account:
    delete:
      consumes:
      - application/json
      description: Delete the authenticated user's account (soft delete)
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete user account
      tags:
      - user
  /user/change-password:
    post:
      consumes:
      - application/json
      description: Change the authenticated user's password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app-backend_internal_dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Current password is incorrect
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - user
  /user/list:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users - requires admin role
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term for user name or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of users
          schema:
            $ref: '#/definitions/app-backend_internal_dto.UserListResponse'
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Admin access required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: List users (Admin only)
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile information
          schema:
            $ref: '#/definitions/app-backend_internal_dto.UserResponse'
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: Profile update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app-backend_internal_dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/app-backend_internal_dto.UserResponse'
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - user
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
